@page "/rcon"
@using CoreRCON;
@using System.Diagnostics;
@using System.Net;
@using System.Text.Json;
@using System.IO;
@using Aetherium.Components.Functions;
@using Aetherium.Components.Functions.Config;
@using Aetherium.Components.Functions.Server;
@using Aetherium.Components.Functions.Toasts;
@inject IJSRuntime JSRuntime


<div class="container">
    <div class="row">
        <div class="col">
            <h5>RCON Console</h5>
            <textarea id="outputTextarea" class="form-control" rows="10" readonly style="background-image: linear-gradient(45deg, rgba(173,0,255,0.05) 0%, rgba(0,221,255,0.05) 100%); color: rgb(255, 255, 255, 0.90); border-color: rgb(255, 255, 255, 0.05); resize: none; margin-top: 0.25rem; margin-bottom: 0.25rem;">@AppConfig.rconOutput</textarea>

            <div class="input-group mt-1">
                <button class="btn btn-success bg-gradient btn-sm rcon-button" @onclick="RconConnect">Connect</button>
                <button class="btn btn-danger bg-gradient btn-sm rcon-button" @onclick="RconDisconnect">Disconnect</button>
                <input type="text" class="form-control rcon-input" placeholder="Enter RCON rconCommand" @bind="AppConfig.rconCommand">
                <button class="btn btn-primary btn-sm rcon-button" @onclick="RconSendCommand">Send</button>
            </div>
        </div>
    </div>
</div>

@code {


    protected override async Task OnInitializedAsync()
    {
        AppSettingsLoad.LoadAppConfig();
        if (!string.IsNullOrWhiteSpace(Configuration.Instance.ConfigName)) // Ensure a config name is set before attempting to load, to avoid errors
        {
            ServerConfigsLoad.LoadServerConfig(Configuration.Instance.ConfigName); // Load selected Configuration
        }
    }

    // Scroll textarea and Update UI
    private async void OutputUpdate()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
        await InvokeAsync(StateHasChanged);
    }

    public async Task RconConnect()
    {
        // Assuming AppConfig.rconIp, AppConfig.rconPort, and AppConfig.rconPassword are already populated
        if (!string.IsNullOrWhiteSpace(AppConfig.rconIp) && !string.IsNullOrWhiteSpace(AppConfig.rconPort) && !string.IsNullOrWhiteSpace(AppConfig.rconPassword))
        {
            try
            {
                AppConfig.rcon = new RCON(IPAddress.Parse(AppConfig.rconIp), ushort.Parse(AppConfig.rconPort), AppConfig.rconPassword);
                await AppConfig.rcon.ConnectAsync();
                AppConfig.isConnected = true;
                AppConfig.rconOutput += "[Rcon] Connected successfully.\n";
            }
            catch (Exception ex)
            {
                AppConfig.rconOutput += $"[Rcon] Failed to connect: {ex.Message}\n";
            }
        }
        else
        {
            AppConfig.rconOutput += "[Rcon] Configuration not found or incomplete.\n";
        }
    }


    private async Task RconSendCommand()
    {
        if (AppConfig.isConnected && AppConfig.rcon != null && !string.IsNullOrWhiteSpace(AppConfig.rconCommand))
        {
            try
            {
                var response = await AppConfig.rcon.SendCommandAsync(AppConfig.rconCommand);
                AppConfig.rconOutput += $"\n{response}";
            }
            catch (Exception ex)
            {
                AppConfig.rconOutput += $"Server: {ex.Message}\n";
            }
        }
        else if (!AppConfig.isConnected)
        {
            AppConfig.rconOutput += "[Rcon] Not connected.\n";
        }
    }

    private void RconDisconnect()
    {
        if (AppConfig.rcon != null)
        {
            try
            {
                AppConfig.rcon.Dispose();
                AppConfig.isConnected = false;
                AppConfig.rconOutput += "[Rcon] Disconnected successfully.\n";
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"RCON is not connected: {ex.Message}");
                ToastService.Toast("RCON is not connected:", ex.Message);
            }
        }
    }
}
