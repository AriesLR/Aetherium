@page "/server"
@using System;
@using System.Diagnostics;
@using System.IO;
@using System.IO.Compression;
@using System.Text;
@using System.Text.Json;
@using System.Threading;
@using System.Threading.Tasks;
@using Aetherium.Components.Pages;
@using Aetherium.Components.Functions;
@using Aetherium.Components.Functions.Config;
@using Aetherium.Components.Functions.Server;
@inject IJSRuntime JSRuntime


<div class="container">
    <div class="row">
        <div class="col">
            <h5>Server Output</h5>
            <textarea id="outputTextarea" class="form-control mb-1" rows="10" readonly style="background-image: linear-gradient(45deg, rgba(173,0,255,0.05) 0%, rgba(0,221,255,0.05) 100%); color: rgb(255, 255, 255, 0.90); border-color: rgb(255, 255, 255, 0.05); resize: none; margin-top: 0.25rem; margin-bottom: 0.25rem;">@AppConfig.serverOutput</textarea>
            <div class="input-group mt-1">
                <input type="text" class="form-control rcon-input" placeholder="Enter server input" @bind="AppConfig.serverInput">
                <button class="btn btn-primary btn-sm rcon-button" @onclick="ServerInput.SendServerInput">Send</button>
            </div>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col d-flex justify-content-center">
            <button class="btn btn-success bg-gradient btn-sm m-1" @onclick="ServerStart.StartServer" disabled="@((AppConfig.serverProcess != null && !AppConfig.serverProcess.HasExited) || AppConfig.serverStarting)">Start Server</button>
            <button class="btn btn-danger bg-gradient btn-sm m-1" @onclick="ServerStop.StopServer" disabled="@((AppConfig.serverProcess == null || AppConfig.serverProcess.HasExited) || AppConfig.serverStopping)">Stop Server</button>
        </div>
    </div>
    <div class="row">
        <div class="col d-flex justify-content-center">
            <div class="togglebg">
                <div class="togglecontents">
                    <div class="toggle-label">
                        <span>Automatic Restarts</span>
                    </div>
                    <div class="form-check form-switch toggle-switch">
                        <input type="checkbox" class="form-check-input" checked="@AppConfig.automaticRestarts" @onchange="RestartToggle.ToggleRestart">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col d-flex justify-content-center">
            <div class="togglebg">
                <div class="togglecontents">
                    <div class="toggle-label">
                        <span>Save Backups</span>
                    </div>
                    <div class="form-check form-switch toggle-switch">
                        <input type="checkbox" class="form-check-input" checked="@AppConfig.saveBackupsEnabled" @onchange="BackupToggle.ToggleBackup">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        AppSettingsLoad.LoadAppConfig();
        if (!string.IsNullOrWhiteSpace(Configuration.Instance.ConfigName)) // Ensure a config name is set before attempting to load, to avoid errors
        {
            ServerConfigsLoad.LoadServerConfig(Configuration.Instance.ConfigName); // Load selected Configuration
        }

        AppConfig.serverOutput = await GetItem("serverOutput");

        ServerStart.OnOutputDataReceived += HandleOutputDataReceived;
        ServerStart.OnErrorDataReceived += HandleErrorDataReceived;
        ServerStart.OnProcessExited += HandleProcessExited;
    }

    private void HandleOutputDataReceived(string data)
    {
        if (!string.IsNullOrEmpty(data))
        {
            AppConfig.serverOutput += data + Environment.NewLine;
            var _ = SetItem("serverOutput", AppConfig.serverOutput);
            OutputUpdate();
        }
    }

    private void HandleErrorDataReceived(string data)
    {
        if (!string.IsNullOrEmpty(data))
        {
            AppConfig.serverOutput += data + Environment.NewLine;
            var _ = SetItem("serverOutput", AppConfig.serverOutput);
            OutputUpdate();
        }
    }

    // Method to handle process exit
    private void HandleProcessExited()
    {
        AppConfig.serverProcess.Dispose();
        AppConfig.serverProcess = null;
        InvokeAsync(StateHasChanged);
    }

    // Scroll textarea and Update UI
    private async void OutputUpdate()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetItem(string key, string? value)
    {
        await JSRuntime.InvokeVoidAsync("sessionStorageInterop.setItem", key, value);
    }

    private async Task<string?> GetItem(string key)
    {
        return await JSRuntime.InvokeAsync<string>("sessionStorageInterop.getItem", key);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            // Dispose managed resources
            ServerStop.StopServer();
            BackupTimerStop.StopBackupTimer(); // Also stop the backup timer on dispose
        }
    }
}
